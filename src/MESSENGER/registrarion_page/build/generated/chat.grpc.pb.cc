// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto

#include "chat.pb.h"
#include "chat.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace chat {

static const char* ChatService_method_names[] = {
  "/chat.ChatService/chat",
  "/chat.ChatService/log_in",
  "/chat.ChatService/registration",
};

std::unique_ptr< ChatService::Stub> ChatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatService::Stub> stub(new ChatService::Stub(channel));
  return stub;
}

ChatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_chat_(ChatService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_log_in_(ChatService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_registration_(ChatService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::chat::chatMessage, ::chat::chatMessage>* ChatService::Stub::chatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::chat::chatMessage, ::chat::chatMessage>::Create(channel_.get(), rpcmethod_chat_, context);
}

void ChatService::Stub::experimental_async::chat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::chat::chatMessage,::chat::chatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::chat::chatMessage,::chat::chatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_chat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::chat::chatMessage, ::chat::chatMessage>* ChatService::Stub::AsyncchatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::chat::chatMessage, ::chat::chatMessage>::Create(channel_.get(), cq, rpcmethod_chat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::chat::chatMessage, ::chat::chatMessage>* ChatService::Stub::PrepareAsyncchatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::chat::chatMessage, ::chat::chatMessage>::Create(channel_.get(), cq, rpcmethod_chat_, context, false, nullptr);
}

::grpc::Status ChatService::Stub::log_in(::grpc::ClientContext* context, const ::chat::loginMessage& request, ::chat::loginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_log_in_, context, request, response);
}

void ChatService::Stub::experimental_async::log_in(::grpc::ClientContext* context, const ::chat::loginMessage* request, ::chat::loginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_log_in_, context, request, response, std::move(f));
}

void ChatService::Stub::experimental_async::log_in(::grpc::ClientContext* context, const ::chat::loginMessage* request, ::chat::loginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_log_in_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chat::loginResponse>* ChatService::Stub::PrepareAsynclog_inRaw(::grpc::ClientContext* context, const ::chat::loginMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chat::loginResponse>::Create(channel_.get(), cq, rpcmethod_log_in_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::chat::loginResponse>* ChatService::Stub::Asynclog_inRaw(::grpc::ClientContext* context, const ::chat::loginMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclog_inRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::registration(::grpc::ClientContext* context, const ::chat::loginMessage& request, ::chat::registrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_registration_, context, request, response);
}

void ChatService::Stub::experimental_async::registration(::grpc::ClientContext* context, const ::chat::loginMessage* request, ::chat::registrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registration_, context, request, response, std::move(f));
}

void ChatService::Stub::experimental_async::registration(::grpc::ClientContext* context, const ::chat::loginMessage* request, ::chat::registrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_registration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chat::registrationResponse>* ChatService::Stub::PrepareAsyncregistrationRaw(::grpc::ClientContext* context, const ::chat::loginMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chat::registrationResponse>::Create(channel_.get(), cq, rpcmethod_registration_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::chat::registrationResponse>* ChatService::Stub::AsyncregistrationRaw(::grpc::ClientContext* context, const ::chat::loginMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregistrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChatService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ChatService::Service, ::chat::chatMessage, ::chat::chatMessage>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::chat::chatMessage,
             ::chat::chatMessage>* stream) {
               return service->chat(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::chat::loginMessage, ::chat::loginResponse>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chat::loginMessage* req,
             ::chat::loginResponse* resp) {
               return service->log_in(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::chat::loginMessage, ::chat::registrationResponse>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chat::loginMessage* req,
             ::chat::registrationResponse* resp) {
               return service->registration(ctx, req, resp);
             }, this)));
}

ChatService::Service::~Service() {
}

::grpc::Status ChatService::Service::chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chat::chatMessage, ::chat::chatMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::log_in(::grpc::ServerContext* context, const ::chat::loginMessage* request, ::chat::loginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::registration(::grpc::ServerContext* context, const ::chat::loginMessage* request, ::chat::registrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chat

