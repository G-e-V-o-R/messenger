// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace chat {
class chatMessage;
class chatMessageDefaultTypeInternal;
extern chatMessageDefaultTypeInternal _chatMessage_default_instance_;
class loginMessage;
class loginMessageDefaultTypeInternal;
extern loginMessageDefaultTypeInternal _loginMessage_default_instance_;
class loginResponse;
class loginResponseDefaultTypeInternal;
extern loginResponseDefaultTypeInternal _loginResponse_default_instance_;
class registrationResponse;
class registrationResponseDefaultTypeInternal;
extern registrationResponseDefaultTypeInternal _registrationResponse_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::chatMessage* Arena::CreateMaybeMessage<::chat::chatMessage>(Arena*);
template<> ::chat::loginMessage* Arena::CreateMaybeMessage<::chat::loginMessage>(Arena*);
template<> ::chat::loginResponse* Arena::CreateMaybeMessage<::chat::loginResponse>(Arena*);
template<> ::chat::registrationResponse* Arena::CreateMaybeMessage<::chat::registrationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

// ===================================================================

class chatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.chatMessage) */ {
 public:
  inline chatMessage() : chatMessage(nullptr) {}
  virtual ~chatMessage();

  chatMessage(const chatMessage& from);
  chatMessage(chatMessage&& from) noexcept
    : chatMessage() {
    *this = ::std::move(from);
  }

  inline chatMessage& operator=(const chatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatMessage& operator=(chatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatMessage* internal_default_instance() {
    return reinterpret_cast<const chatMessage*>(
               &_chatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(chatMessage& a, chatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(chatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(chatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatMessage* New() const final {
    return CreateMaybeMessage<chatMessage>(nullptr);
  }

  chatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatMessage& from);
  void MergeFrom(const chatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.chatMessage";
  }
  protected:
  explicit chatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 1,
    kSenderNameFieldNumber = 2,
    kSenderStatusFieldNumber = 3,
    kRecipientIdFieldNumber = 4,
    kMessageTextFieldNumber = 5,
  };
  // string sender_id = 1;
  void clear_sender_id();
  const std::string& sender_id() const;
  void set_sender_id(const std::string& value);
  void set_sender_id(std::string&& value);
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  std::string* mutable_sender_id();
  std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // string sender_name = 2;
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // string sender_status = 3;
  void clear_sender_status();
  const std::string& sender_status() const;
  void set_sender_status(const std::string& value);
  void set_sender_status(std::string&& value);
  void set_sender_status(const char* value);
  void set_sender_status(const char* value, size_t size);
  std::string* mutable_sender_status();
  std::string* release_sender_status();
  void set_allocated_sender_status(std::string* sender_status);
  private:
  const std::string& _internal_sender_status() const;
  void _internal_set_sender_status(const std::string& value);
  std::string* _internal_mutable_sender_status();
  public:

  // string recipient_id = 4;
  void clear_recipient_id();
  const std::string& recipient_id() const;
  void set_recipient_id(const std::string& value);
  void set_recipient_id(std::string&& value);
  void set_recipient_id(const char* value);
  void set_recipient_id(const char* value, size_t size);
  std::string* mutable_recipient_id();
  std::string* release_recipient_id();
  void set_allocated_recipient_id(std::string* recipient_id);
  private:
  const std::string& _internal_recipient_id() const;
  void _internal_set_recipient_id(const std::string& value);
  std::string* _internal_mutable_recipient_id();
  public:

  // string message_text = 5;
  void clear_message_text();
  const std::string& message_text() const;
  void set_message_text(const std::string& value);
  void set_message_text(std::string&& value);
  void set_message_text(const char* value);
  void set_message_text(const char* value, size_t size);
  std::string* mutable_message_text();
  std::string* release_message_text();
  void set_allocated_message_text(std::string* message_text);
  private:
  const std::string& _internal_message_text() const;
  void _internal_set_message_text(const std::string& value);
  std::string* _internal_mutable_message_text();
  public:

  // @@protoc_insertion_point(class_scope:chat.chatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class loginMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.loginMessage) */ {
 public:
  inline loginMessage() : loginMessage(nullptr) {}
  virtual ~loginMessage();

  loginMessage(const loginMessage& from);
  loginMessage(loginMessage&& from) noexcept
    : loginMessage() {
    *this = ::std::move(from);
  }

  inline loginMessage& operator=(const loginMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline loginMessage& operator=(loginMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loginMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loginMessage* internal_default_instance() {
    return reinterpret_cast<const loginMessage*>(
               &_loginMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(loginMessage& a, loginMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(loginMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loginMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loginMessage* New() const final {
    return CreateMaybeMessage<loginMessage>(nullptr);
  }

  loginMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loginMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loginMessage& from);
  void MergeFrom(const loginMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.loginMessage";
  }
  protected:
  explicit loginMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:chat.loginMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class loginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.loginResponse) */ {
 public:
  inline loginResponse() : loginResponse(nullptr) {}
  virtual ~loginResponse();

  loginResponse(const loginResponse& from);
  loginResponse(loginResponse&& from) noexcept
    : loginResponse() {
    *this = ::std::move(from);
  }

  inline loginResponse& operator=(const loginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loginResponse& operator=(loginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loginResponse* internal_default_instance() {
    return reinterpret_cast<const loginResponse*>(
               &_loginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(loginResponse& a, loginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loginResponse* New() const final {
    return CreateMaybeMessage<loginResponse>(nullptr);
  }

  loginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loginResponse& from);
  void MergeFrom(const loginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.loginResponse";
  }
  protected:
  explicit loginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 3,
    kSessionIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated .chat.chatMessage messages = 3;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::chat::chatMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::chatMessage >*
      mutable_messages();
  private:
  const ::chat::chatMessage& _internal_messages(int index) const;
  ::chat::chatMessage* _internal_add_messages();
  public:
  const ::chat::chatMessage& messages(int index) const;
  ::chat::chatMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::chatMessage >&
      messages() const;

  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:chat.loginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::chatMessage > messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class registrationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.registrationResponse) */ {
 public:
  inline registrationResponse() : registrationResponse(nullptr) {}
  virtual ~registrationResponse();

  registrationResponse(const registrationResponse& from);
  registrationResponse(registrationResponse&& from) noexcept
    : registrationResponse() {
    *this = ::std::move(from);
  }

  inline registrationResponse& operator=(const registrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline registrationResponse& operator=(registrationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const registrationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registrationResponse* internal_default_instance() {
    return reinterpret_cast<const registrationResponse*>(
               &_registrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(registrationResponse& a, registrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(registrationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline registrationResponse* New() const final {
    return CreateMaybeMessage<registrationResponse>(nullptr);
  }

  registrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<registrationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const registrationResponse& from);
  void MergeFrom(const registrationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.registrationResponse";
  }
  protected:
  explicit registrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:chat.registrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// chatMessage

// string sender_id = 1;
inline void chatMessage::clear_sender_id() {
  sender_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& chatMessage::sender_id() const {
  // @@protoc_insertion_point(field_get:chat.chatMessage.sender_id)
  return _internal_sender_id();
}
inline void chatMessage::set_sender_id(const std::string& value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:chat.chatMessage.sender_id)
}
inline std::string* chatMessage::mutable_sender_id() {
  // @@protoc_insertion_point(field_mutable:chat.chatMessage.sender_id)
  return _internal_mutable_sender_id();
}
inline const std::string& chatMessage::_internal_sender_id() const {
  return sender_id_.Get();
}
inline void chatMessage::_internal_set_sender_id(const std::string& value) {
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chatMessage::set_sender_id(std::string&& value) {
  
  sender_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.chatMessage.sender_id)
}
inline void chatMessage::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.chatMessage.sender_id)
}
inline void chatMessage::set_sender_id(const char* value,
    size_t size) {
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.chatMessage.sender_id)
}
inline std::string* chatMessage::_internal_mutable_sender_id() {
  
  return sender_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chatMessage::release_sender_id() {
  // @@protoc_insertion_point(field_release:chat.chatMessage.sender_id)
  return sender_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chatMessage::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  sender_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.chatMessage.sender_id)
}

// string sender_name = 2;
inline void chatMessage::clear_sender_name() {
  sender_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& chatMessage::sender_name() const {
  // @@protoc_insertion_point(field_get:chat.chatMessage.sender_name)
  return _internal_sender_name();
}
inline void chatMessage::set_sender_name(const std::string& value) {
  _internal_set_sender_name(value);
  // @@protoc_insertion_point(field_set:chat.chatMessage.sender_name)
}
inline std::string* chatMessage::mutable_sender_name() {
  // @@protoc_insertion_point(field_mutable:chat.chatMessage.sender_name)
  return _internal_mutable_sender_name();
}
inline const std::string& chatMessage::_internal_sender_name() const {
  return sender_name_.Get();
}
inline void chatMessage::_internal_set_sender_name(const std::string& value) {
  
  sender_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chatMessage::set_sender_name(std::string&& value) {
  
  sender_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.chatMessage.sender_name)
}
inline void chatMessage::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.chatMessage.sender_name)
}
inline void chatMessage::set_sender_name(const char* value,
    size_t size) {
  
  sender_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.chatMessage.sender_name)
}
inline std::string* chatMessage::_internal_mutable_sender_name() {
  
  return sender_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chatMessage::release_sender_name() {
  // @@protoc_insertion_point(field_release:chat.chatMessage.sender_name)
  return sender_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chatMessage::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    
  } else {
    
  }
  sender_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.chatMessage.sender_name)
}

// string sender_status = 3;
inline void chatMessage::clear_sender_status() {
  sender_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& chatMessage::sender_status() const {
  // @@protoc_insertion_point(field_get:chat.chatMessage.sender_status)
  return _internal_sender_status();
}
inline void chatMessage::set_sender_status(const std::string& value) {
  _internal_set_sender_status(value);
  // @@protoc_insertion_point(field_set:chat.chatMessage.sender_status)
}
inline std::string* chatMessage::mutable_sender_status() {
  // @@protoc_insertion_point(field_mutable:chat.chatMessage.sender_status)
  return _internal_mutable_sender_status();
}
inline const std::string& chatMessage::_internal_sender_status() const {
  return sender_status_.Get();
}
inline void chatMessage::_internal_set_sender_status(const std::string& value) {
  
  sender_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chatMessage::set_sender_status(std::string&& value) {
  
  sender_status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.chatMessage.sender_status)
}
inline void chatMessage::set_sender_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.chatMessage.sender_status)
}
inline void chatMessage::set_sender_status(const char* value,
    size_t size) {
  
  sender_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.chatMessage.sender_status)
}
inline std::string* chatMessage::_internal_mutable_sender_status() {
  
  return sender_status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chatMessage::release_sender_status() {
  // @@protoc_insertion_point(field_release:chat.chatMessage.sender_status)
  return sender_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chatMessage::set_allocated_sender_status(std::string* sender_status) {
  if (sender_status != nullptr) {
    
  } else {
    
  }
  sender_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.chatMessage.sender_status)
}

// string recipient_id = 4;
inline void chatMessage::clear_recipient_id() {
  recipient_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& chatMessage::recipient_id() const {
  // @@protoc_insertion_point(field_get:chat.chatMessage.recipient_id)
  return _internal_recipient_id();
}
inline void chatMessage::set_recipient_id(const std::string& value) {
  _internal_set_recipient_id(value);
  // @@protoc_insertion_point(field_set:chat.chatMessage.recipient_id)
}
inline std::string* chatMessage::mutable_recipient_id() {
  // @@protoc_insertion_point(field_mutable:chat.chatMessage.recipient_id)
  return _internal_mutable_recipient_id();
}
inline const std::string& chatMessage::_internal_recipient_id() const {
  return recipient_id_.Get();
}
inline void chatMessage::_internal_set_recipient_id(const std::string& value) {
  
  recipient_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chatMessage::set_recipient_id(std::string&& value) {
  
  recipient_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.chatMessage.recipient_id)
}
inline void chatMessage::set_recipient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.chatMessage.recipient_id)
}
inline void chatMessage::set_recipient_id(const char* value,
    size_t size) {
  
  recipient_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.chatMessage.recipient_id)
}
inline std::string* chatMessage::_internal_mutable_recipient_id() {
  
  return recipient_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chatMessage::release_recipient_id() {
  // @@protoc_insertion_point(field_release:chat.chatMessage.recipient_id)
  return recipient_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chatMessage::set_allocated_recipient_id(std::string* recipient_id) {
  if (recipient_id != nullptr) {
    
  } else {
    
  }
  recipient_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.chatMessage.recipient_id)
}

// string message_text = 5;
inline void chatMessage::clear_message_text() {
  message_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& chatMessage::message_text() const {
  // @@protoc_insertion_point(field_get:chat.chatMessage.message_text)
  return _internal_message_text();
}
inline void chatMessage::set_message_text(const std::string& value) {
  _internal_set_message_text(value);
  // @@protoc_insertion_point(field_set:chat.chatMessage.message_text)
}
inline std::string* chatMessage::mutable_message_text() {
  // @@protoc_insertion_point(field_mutable:chat.chatMessage.message_text)
  return _internal_mutable_message_text();
}
inline const std::string& chatMessage::_internal_message_text() const {
  return message_text_.Get();
}
inline void chatMessage::_internal_set_message_text(const std::string& value) {
  
  message_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chatMessage::set_message_text(std::string&& value) {
  
  message_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.chatMessage.message_text)
}
inline void chatMessage::set_message_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.chatMessage.message_text)
}
inline void chatMessage::set_message_text(const char* value,
    size_t size) {
  
  message_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.chatMessage.message_text)
}
inline std::string* chatMessage::_internal_mutable_message_text() {
  
  return message_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chatMessage::release_message_text() {
  // @@protoc_insertion_point(field_release:chat.chatMessage.message_text)
  return message_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chatMessage::set_allocated_message_text(std::string* message_text) {
  if (message_text != nullptr) {
    
  } else {
    
  }
  message_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.chatMessage.message_text)
}

// -------------------------------------------------------------------

// loginMessage

// string username = 1;
inline void loginMessage::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& loginMessage::username() const {
  // @@protoc_insertion_point(field_get:chat.loginMessage.username)
  return _internal_username();
}
inline void loginMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.loginMessage.username)
}
inline std::string* loginMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.loginMessage.username)
  return _internal_mutable_username();
}
inline const std::string& loginMessage::_internal_username() const {
  return username_.Get();
}
inline void loginMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void loginMessage::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.loginMessage.username)
}
inline void loginMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.loginMessage.username)
}
inline void loginMessage::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.loginMessage.username)
}
inline std::string* loginMessage::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* loginMessage::release_username() {
  // @@protoc_insertion_point(field_release:chat.loginMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void loginMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.loginMessage.username)
}

// string password = 2;
inline void loginMessage::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& loginMessage::password() const {
  // @@protoc_insertion_point(field_get:chat.loginMessage.password)
  return _internal_password();
}
inline void loginMessage::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:chat.loginMessage.password)
}
inline std::string* loginMessage::mutable_password() {
  // @@protoc_insertion_point(field_mutable:chat.loginMessage.password)
  return _internal_mutable_password();
}
inline const std::string& loginMessage::_internal_password() const {
  return password_.Get();
}
inline void loginMessage::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void loginMessage::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.loginMessage.password)
}
inline void loginMessage::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.loginMessage.password)
}
inline void loginMessage::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.loginMessage.password)
}
inline std::string* loginMessage::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* loginMessage::release_password() {
  // @@protoc_insertion_point(field_release:chat.loginMessage.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void loginMessage::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.loginMessage.password)
}

// -------------------------------------------------------------------

// loginResponse

// string session_id = 1;
inline void loginResponse::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& loginResponse::session_id() const {
  // @@protoc_insertion_point(field_get:chat.loginResponse.session_id)
  return _internal_session_id();
}
inline void loginResponse::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:chat.loginResponse.session_id)
}
inline std::string* loginResponse::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:chat.loginResponse.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& loginResponse::_internal_session_id() const {
  return session_id_.Get();
}
inline void loginResponse::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void loginResponse::set_session_id(std::string&& value) {
  
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.loginResponse.session_id)
}
inline void loginResponse::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.loginResponse.session_id)
}
inline void loginResponse::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.loginResponse.session_id)
}
inline std::string* loginResponse::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* loginResponse::release_session_id() {
  // @@protoc_insertion_point(field_release:chat.loginResponse.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void loginResponse::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.loginResponse.session_id)
}

// string id = 2;
inline void loginResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& loginResponse::id() const {
  // @@protoc_insertion_point(field_get:chat.loginResponse.id)
  return _internal_id();
}
inline void loginResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chat.loginResponse.id)
}
inline std::string* loginResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:chat.loginResponse.id)
  return _internal_mutable_id();
}
inline const std::string& loginResponse::_internal_id() const {
  return id_.Get();
}
inline void loginResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void loginResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.loginResponse.id)
}
inline void loginResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.loginResponse.id)
}
inline void loginResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.loginResponse.id)
}
inline std::string* loginResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* loginResponse::release_id() {
  // @@protoc_insertion_point(field_release:chat.loginResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void loginResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.loginResponse.id)
}

// repeated .chat.chatMessage messages = 3;
inline int loginResponse::_internal_messages_size() const {
  return messages_.size();
}
inline int loginResponse::messages_size() const {
  return _internal_messages_size();
}
inline void loginResponse::clear_messages() {
  messages_.Clear();
}
inline ::chat::chatMessage* loginResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:chat.loginResponse.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::chatMessage >*
loginResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:chat.loginResponse.messages)
  return &messages_;
}
inline const ::chat::chatMessage& loginResponse::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::chat::chatMessage& loginResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:chat.loginResponse.messages)
  return _internal_messages(index);
}
inline ::chat::chatMessage* loginResponse::_internal_add_messages() {
  return messages_.Add();
}
inline ::chat::chatMessage* loginResponse::add_messages() {
  // @@protoc_insertion_point(field_add:chat.loginResponse.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat::chatMessage >&
loginResponse::messages() const {
  // @@protoc_insertion_point(field_list:chat.loginResponse.messages)
  return messages_;
}

// -------------------------------------------------------------------

// registrationResponse

// string text = 1;
inline void registrationResponse::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& registrationResponse::text() const {
  // @@protoc_insertion_point(field_get:chat.registrationResponse.text)
  return _internal_text();
}
inline void registrationResponse::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:chat.registrationResponse.text)
}
inline std::string* registrationResponse::mutable_text() {
  // @@protoc_insertion_point(field_mutable:chat.registrationResponse.text)
  return _internal_mutable_text();
}
inline const std::string& registrationResponse::_internal_text() const {
  return text_.Get();
}
inline void registrationResponse::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void registrationResponse::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chat.registrationResponse.text)
}
inline void registrationResponse::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chat.registrationResponse.text)
}
inline void registrationResponse::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chat.registrationResponse.text)
}
inline std::string* registrationResponse::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* registrationResponse::release_text() {
  // @@protoc_insertion_point(field_release:chat.registrationResponse.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void registrationResponse::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chat.registrationResponse.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
